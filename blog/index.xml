<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Seasoned &amp; Agile</title>
    <link>https://cito.github.io/blog/index.xml</link>
    <description>Recent content in Blogs on Seasoned &amp; Agile</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 27 Dec 2016 17:10:27 +0100</lastBuildDate>
    <atom:link href="https://cito.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Python and the 36 Towers</title>
      <link>https://cito.github.io/blog/python-36-towers/</link>
      <pubDate>Tue, 27 Dec 2016 17:10:27 +0100</pubDate>
      
      <guid>https://cito.github.io/blog/python-36-towers/</guid>
      <description>&lt;p&gt;This year my brother&amp;rsquo;s family sent us a puzzle in their Christmas package, mentioning that they already solved it and we should give it a try over the Christmas holidays, too. The puzzle is called &amp;ldquo;36 Cube&amp;rdquo; and looks like this:&lt;/p&gt;

&lt;img class=&#34;center half&#34; src=&#34;https://cito.github.io/img/python-36-towers-1.jpg&#34; alt=&#34;36 Cube&#34;&gt;

&lt;p&gt;The &amp;ldquo;36 Cube&amp;rdquo; consists of a board with a 6x6 grid of tower stubs and 36 towers in 6 different heights and colors which need to be stacked on the stubs so that they all have the same height, forming a cube like in the picture. Also, no two towers of the same color may appear in the same row or column - similar to a Sudoku puzzle.&lt;/p&gt;

&lt;p&gt;The puzzle looked tricky already, but it turned out it was even trickier than I first thought.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;So we started to casually play around with this puzzle while eating Christmas cookies and watching Christmas movies. I found it was pretty easy to place the first 20 to 24 towers properly, but then things started to get complicated as the colors collided. Soon I gave up and concentrated more on the Christmas cookies, while my wife - who is much more patient - managed to stack 33 pieces properly.&lt;/p&gt;

&lt;p&gt;I already knew I would never have that patience, so I had to cheat and use Python to solve the puzzle the next morning. I hacked in all the heights of the tower stubs and wrote a simple recursive brute force algorithm, fully confident of having solved the puzzle in much shorter time than my wife. But the program terminated with no solution. I checked the heights, checked the algorithm, then double-checked it, but still nothing.&lt;/p&gt;

&lt;p&gt;Something seemed to be rotten in the state of Denmark. So I had to cheat again and google the 36 Cube. Sure enough, there even was a whole Wikipedia article about the puzzle with the following spoiler: &amp;ldquo;Careful inspection of the pieces reveals that two of the pieces are special. These two pieces will fit on certain parts of the base differently from other pieces of the same height.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Indeed, when I examined the towers and stubs more carefully, I found that the yellow tower of height six and the orange tower of height five were special, and could be placed on two special stubs on which the ordinary towers could not be placed. A really mean, but clever idea that gives the puzzle an additional twist. I like such puzzles that cannot be solved in a straightforward manner, but by &amp;ldquo;thinking around the corner&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;After adding these two exceptions to my Python program (listed at the bottom of this blog post), it found not only one, but even 96 solutions, and it didn&amp;rsquo;t take even a second to list them all. Python to the rescue!&lt;/p&gt;

&lt;p&gt;Maybe I should not have cheated, but looking it up in Wikipedia also revealed the quite interesting background story of this puzzle. Allegedly, it goes back to Catherine the Great in the golden age of the Russian empire.&lt;/p&gt;

&lt;img class=&#34;center half&#34; src=&#34;https://cito.github.io/img/python-36-towers-2.jpg&#34; alt=&#34;Catherine the Great&#34;&gt;

&lt;p&gt;Like today, the Russian leaders were obsessed with the military, and so Catherine one day had the crazy idea that she absolutely needed to arrange 36 of her officers from six different regiments with six different ranks in a 6x6 grid so that each row and column of the grid contained only one officer of each rank and regiment.&lt;/p&gt;

&lt;p&gt;If you think of the towers in the 36 Cube as officers, the different colors representing different regimes, and the different heights representing different ranks, then you see how Catherine&amp;rsquo;s puzzle is directly related to the 36 Cube. In fact, its inventor, Derrick Niederman,  got his inspiration from the 36 officers problem.&lt;/p&gt;

&lt;p&gt;Back to Catherine, who also noticed that the puzzle was tricky. Different from certain political leaders today, she was still believing in the competency of experts, and so she asked one of them. That expert was none less than the famous Swiss mathematician Leonhard Euler, who, as luck would have it, was living in Petersburg at that time.&lt;/p&gt;

&lt;img class=&#34;center half&#34; src=&#34;https://cito.github.io/img/python-36-towers-3.jpg&#34; alt=&#34;Leonhard Euler&#34;&gt;

&lt;p&gt;So Euler started to search for a solution, but could not find one. Since he knew he was brilliant, he concluded that a solution could not exist, otherwise he would have found it. In fact, he found solutions for square grids with 3, 4, 5, 7, 8 and 9 rows. Such solutions are now called &lt;em&gt;Euler squares&lt;/em&gt; in his honor. However, he couldn&amp;rsquo;t come up with a 6x6 Euler square. Since Euler didn&amp;rsquo;t have a computer and probably didn&amp;rsquo;t want to waste too much time with it, he was not able to prove his conjecture that a solution does not exist. The first such proof was given in 1901 by the French amateur mathematician Gaston Tarry, and it was a really lengthy one that more or less systematically checked all possible combinations. I include his picture to pay homage to his diligent piece of work and all amateurs, even though he is not so famous:&lt;/p&gt;

&lt;img class=&#34;center half&#34; src=&#34;https://cito.github.io/img/python-36-towers-4.jpg&#34; alt=&#34;Gaston Tarry&#34;&gt;

&lt;p&gt;In 1984, the professional Canadian mathematician Douglas Stinson gave a much shorter proof without using a computer. Today, with a computer and some Python you can easily prove that the problem is not solvable even before breakfast.&lt;/p&gt;

&lt;p&gt;Here is the small Python program I wrote to find the 96 solutions of the 36 Cube:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#/usr/bin/python3

&amp;quot;&amp;quot;&amp;quot;The 36 Tower Puzzle&amp;quot;&amp;quot;&amp;quot;

# the colors of the tower
colors = &#39;red yellow blue green violet orange&#39;.split()

# the heights of the stubs
# (stub of height 1 at upper left corner)
heights = &#39;134520 250413 013254 541302 425031 302145&#39;
heights = [list(map(int, row)) for row in heights.split()]

# possible positions of the towers
places = [[set() for height in range(6)] for color in range(6)]
for row in range(6):
    for column in range(6):
        for color in range(6):
            places[color][5 - heights[row][column]].add((row, column))

# this is the crucial trick: two towers are special
# if you comment out the following two lines, no solution is found
places[1][4].add((1, 2))
places[5][5].add((3, 2))

# list of all towers
towers = [(color, height) for color in range(6) for height in range(6)]

# the board
board = [[None] * 6 for row in range(6)]

# list for storing the solutions
solutions = []

def stringify():
    &amp;quot;&amp;quot;&amp;quot;convert the board to a readable string&amp;quot;&amp;quot;&amp;quot;
    return &#39;\n&#39;.join(&#39;-&#39;.join(colors[color]
        for color in board[row]) for row in range(6))

def solve(tower=0):
    &amp;quot;&amp;quot;&amp;quot;solve the puzzle recursively&amp;quot;&amp;quot;&amp;quot;
    if tower == 36:
        solution = stringify()
        solutions.append(solution)
        print(&amp;quot;\nSolution {}:&amp;quot;.format(len(solutions)))
        print(solution)
        return
    color, height = towers[tower]
    for row, column in places[color][height]:
        if board[row][column] is None:
            for row2 in range(6):
                if board[row2][column] == color:
                    break
            else:
                for column2 in range(6):
                    if board[row][column2] == color:
                        break
                else:
                    board[row][column] = color
                    solve(tower + 1)
                    board[row][column] = None

print(&amp;quot;Solving...&amp;quot;)
solve()
print(&amp;quot;\nReady.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>The new f-strings in Python 3.6</title>
      <link>https://cito.github.io/blog/f-strings/</link>
      <pubDate>Sat, 24 Dec 2016 09:00:00 +0100</pubDate>
      
      <guid>https://cito.github.io/blog/f-strings/</guid>
      <description>&lt;img class=&#34;center half&#34; src=&#34;https://cito.github.io/img/f-strings-0.jpg&#34; alt=&#34;Benchmark results&#34;&gt;

&lt;p&gt;Hurray! It&amp;rsquo;s Christmas time - and Python 3.6 has been released!&lt;/p&gt;

&lt;p&gt;One of the &lt;a href=&#34;https://docs.python.org/3.6/whatsnew/3.6.html&#34;&gt;many goodies&lt;/a&gt; packed into the new release are &lt;a href=&#34;https://docs.python.org/3.6/reference/lexical_analysis.html#f-strings&#34;&gt;formatted string literals&lt;/a&gt;, or simply called &amp;ldquo;f-strings&amp;rdquo;. In this blog post I&amp;rsquo;ll explain why this is good news.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;First, they are called f-strings because you need to prefix a string with the letter &amp;ldquo;f&amp;rdquo; in order to get an f-string, similar to how you create a raw string by prefixing it with &amp;ldquo;r&amp;rdquo;, or you can use the prefixes &amp;ldquo;b&amp;rdquo; and &amp;ldquo;u&amp;rdquo; to designate byte strings and unicode strings. Note that the &amp;ldquo;u&amp;rdquo; prefix was only necessary in Python 2 (&amp;ldquo;Legacy Python&amp;rdquo;), since native strings are the default now in Python 3.&lt;/p&gt;

&lt;p&gt;The letter &amp;ldquo;f&amp;rdquo; also indicates that these strings are used for formatting. Now Python already provides several ways for formatting strings, so you may wonder why the Python gods introduced yet another way, in blatant violation of the &lt;a href=&#34;https://www.python.org/doc/humor/#the-zen-of-python&#34;&gt;Zen of Python&lt;/a&gt;, according to which there should be only one obvious way of doing things. In fact some people already complained about this. However, these people overlook that the Zen of Python also states that simple is better than complex and practicality beats purity - and yes, f-strings are really the most simple and practical way for formatting strings.&lt;/p&gt;

&lt;h2 id=&#34;some-examples&#34;&gt;Some examples&lt;/h2&gt;

&lt;p&gt;Look how easy it is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; name = &#39;Fred&#39;
&amp;gt;&amp;gt;&amp;gt; age = 42
&amp;gt;&amp;gt;&amp;gt; f&#39;He said his name is {name} and he is {age} years old.&#39;
He said his name is Fred and he is 42 years old.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you see, this works pretty much like the &lt;code&gt;.format()&lt;/code&gt; method, however you can directly insert the names from the current scope in the format string. This is much simpler than the old way, and avoids duplication:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; name = &#39;Fred&#39;
&amp;gt;&amp;gt;&amp;gt; age = 42
&amp;gt;&amp;gt;&amp;gt; &#39;He said his name is {name} and he is {age} years old.&#39;.format(
...     name=name, age=age)
He said his name is Fred and he is 42 years old.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sure, you can omit the names inside the curly braces since Python 3.1, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; name = &#39;Fred&#39;
&amp;gt;&amp;gt;&amp;gt; age = 42
&amp;gt;&amp;gt;&amp;gt; &#39;He said his name is {} and he is {} years old.&#39;.format(name, age)
&#39;He said his name is Fred and he is 42 years old.&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But still, this is longer and not as readable as the f-string notation.&lt;/p&gt;

&lt;p&gt;And it gets even better than this, as f-strings also support any Python expressions inside the curly braces. You can also write triple-quoted f-strings that span multiple lines, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; name = &#39;Fred&#39;
&amp;gt;&amp;gt;&amp;gt; seven = 7
&amp;gt;&amp;gt;&amp;gt; f&#39;&#39;&#39;He said his name is {name.upper()}
...    and he is {6 * seven} years old.&#39;&#39;&#39;
&#39;He said his name is FRED\n    and he is 42 years old.&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that while you can create raw f-strings by using the prefix &amp;ldquo;fr&amp;rdquo;, you cannot create binary f-strings with &amp;ldquo;fb&amp;rdquo; in Python 3.6 (maybe this will be added in a future Python version). Formatting with f-strings is one of the new features in Python 3 that will not be ported back to Python 2, therefore a &amp;ldquo;fu&amp;rdquo; prefix to designate unicode is not necessary and not supported.&lt;/p&gt;

&lt;h2 id=&#34;comparison-with-template-literals-in-javascript&#34;&gt;Comparison with template literals in JavaScript&lt;/h2&gt;

&lt;p&gt;When we look beyond our Python back yard over to the JavaScript folks, we see that they introduced a very similar feature called &amp;ldquo;template strings&amp;rdquo; or &amp;ldquo;template literals&amp;rdquo; as part of the &lt;a href=&#34;http://www.ecma-international.org/ecma-262/6.0/&#34;&gt;ECMAScript 2015&lt;/a&gt; standard. It&amp;rsquo;s good to see the JavaScript and Python communities taking inspiration from each other. Instead of the prefix &amp;ldquo;f&amp;rdquo; and ordinary quotes, the JavaScript template strings are designated with reverse quotes (&amp;ldquo;backticks&amp;rdquo;), and they can span multi lines which ordinary JavaScript strings can&amp;rsquo;t. Therefore template scripts in JavaScript actually correspond to triple-quoted f-strings in Python. Another difference is that the interpolation syntax of template strings in JavaScript requires a dollar sign in front of the curly braces. Otherwise, they are pretty similar. So, in current JavaScript you can write this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; name = &#39;Fred&#39;
&amp;gt; seven = 7
&amp;gt; console.log(`He said his name is ${name.toUpperCase()}
    and he is ${6 * seven} years old`)
He said his name is FRED
  and he is 42 years old
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that backticks had been used as an alternative syntax for the &lt;code&gt;repr()&lt;/code&gt; method in Python before, but have been removed from the language with Python 3, since the backtick character causes too many problems (e.g. it can be difficult to distinguish in some fonts or difficult to enter on some keyboards), and I think it&amp;rsquo;s good that Python uses the &amp;ldquo;f&amp;rdquo;-prefix instead of another kind of quote. This makes it actually easier to switch between f-strings and ordinary strings. Another advantage of Python is that the concepts of a template string (prefix &amp;ldquo;f&amp;rdquo;) and a multi-line string (triple quotes) are cleanly separated and can be used independently of each other. And I like that I don&amp;rsquo;t have to enter that additional dollar sign.&lt;/p&gt;

&lt;p&gt;What make things a bit more confusing is that JavaScript templates also have a syntax called &amp;ldquo;tagged templates&amp;rdquo; that looks like the prefix syntax of Python, but has a totally different semantics. The prefix (&amp;ldquo;tag&amp;rdquo;) in JavaScript actually is the name of a function that is called with the template string and its substitutions as parameters. There is also a standard function called &lt;code&gt;String.raw&lt;/code&gt; in JavaScript that can be used as a tag function. If you set &lt;code&gt;r = String.raw&lt;/code&gt;, you can use raw strings in JavaScript like in Python with a similar syntax (though not exactly the same, since you still need backticks instead of quotes).&lt;/p&gt;

&lt;h2 id=&#34;comparison-with-template-strings-in-python&#34;&gt;Comparison with template strings in Python&lt;/h2&gt;

&lt;p&gt;Python also provides an older kind of &lt;a href=&#34;https://docs.python.org/3/library/string.html#template-strings&#34;&gt;template strings&lt;/a&gt; as part of the standard library. These template strings also use the syntax with the dollar sign and the curly braces like JavaScript does, but you can usually omit the curly braces, which you cannot do in JavaScript. You use them like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from string import Template
&amp;gt;&amp;gt;&amp;gt; t = Template(&#39;He said his name is $name and he is $age years old.&#39;)
&amp;gt;&amp;gt;&amp;gt; t.substitute(name=&#39;Fred&#39;, age=42)
&#39;He said his name is Fred and he is 42 years old.&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;performance-considerations&#34;&gt;Performance considerations&lt;/h2&gt;

&lt;p&gt;You may be worried that the new way of formatting strings might be slower than the conventional ways. Particularly the old template strings look like they might be faster when used more than once with different values, since the template string must only be parsed when the &lt;code&gt;Template()&lt;/code&gt; object is created and can then be reused. But it turns out the opposite is the case, and f-strings are really fast because they are pre-parsed as well and stored in efficient bytecode for faster execution.&lt;/p&gt;

&lt;p&gt;To confirm this in practice, I ran a simple benchmark and found that using f-strings was distinctly faster than formatting with the &amp;ldquo;%&amp;rdquo; operator or simple string concatenation, twice as fast than the &lt;code&gt;.format()&lt;/code&gt; method and even 20 times faster than formatting with &lt;code&gt;Template()&lt;/code&gt;, which does not seem to be implemented very efficiently.&lt;/p&gt;

&lt;p&gt;So you can also interpret the &amp;ldquo;f&amp;rdquo; in &amp;ldquo;f-strings&amp;rdquo; as &amp;ldquo;fast&amp;rdquo;. It&amp;rsquo;s good that Python still keeps the old ways for backward compatibility, but in new code you should definitely make use of these fantastic f-strings. Here is the code for the benchmark, if you want to test it yourself:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import timeit

format = &amp;quot;&amp;quot;&amp;quot;
def format(name, age):
    return f&#39;He said his name is {name} and he is {age} years old.&#39;
&amp;quot;&amp;quot;&amp;quot;, &amp;quot;&amp;quot;&amp;quot;
def format(name, age):
    return &#39;He said his name is %s and he is %s years old.&#39; % (name, age)
&amp;quot;&amp;quot;&amp;quot;, &amp;quot;&amp;quot;&amp;quot;
def format(name, age):
    return &#39;He said his name is &#39; + name + &#39; and he is &#39; + str(
        age) + &#39; years old.&#39;
&amp;quot;&amp;quot;&amp;quot;,  &amp;quot;&amp;quot;&amp;quot;
def format(name, age):
    return &#39;He said his name is {} and he is {} years old.&#39;.format(name, age)
&amp;quot;&amp;quot;&amp;quot;, &amp;quot;&amp;quot;&amp;quot;
from string import Template

template = Template(&#39;He said his name is $name and he is $age years old.&#39;)

def format(name, age):
    return template.substitute(name=name, age=age)
&amp;quot;&amp;quot;&amp;quot;

test = &amp;quot;&amp;quot;&amp;quot;
def test():
    for name in (&#39;Fred&#39;, &#39;Barney&#39;, &#39;Gary&#39;, &#39;Rock&#39;, &#39;Perry&#39;, &#39;Jackie&#39;):
        for age in range (20, 200):
            format(name, age)
&amp;quot;&amp;quot;&amp;quot;

for fmt in format:
    print(timeit.timeit(&#39;test()&#39;, fmt + test, number=10000))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is a diagram of the execution times of the various tested methods:&lt;/p&gt;

&lt;img class=&#34;center half&#34; src=&#34;https://cito.github.io/img/f-strings-1.png&#34; alt=&#34;Benchmark results&#34;&gt;

&lt;p&gt;As with all benchmarks, keep in mind that many factors play a role when formatting and this serves only as a rough guidance. Particularly, I noticed that when using &amp;ldquo;d&amp;rdquo; as a format specifier for the integer number, the prominence of the f-string execution time was largely diminished. Maybe there is still room for optimization here. But formatting with f-strings was still the fastest methods.&lt;/p&gt;

&lt;h2 id=&#34;support-for-f-strings-in-pycharm&#34;&gt;Support for f-strings in PyCharm&lt;/h2&gt;

&lt;p&gt;If you like the &lt;a href=&#34;https://www.jetbrains.com/pycharm/&#34;&gt;PyCharm&lt;/a&gt; IDE (I definitely do), you will be glad to hear that it fully supports Python 3.6 and f-strings. Code completion works with expressions embedded inside f-strings just like with ordinary expressions, and there is even a code intention that suggests to &amp;ldquo;convert to f-string literal&amp;rdquo;. This means if you have an old Python program that still uses the &lt;code&gt;.format()&lt;/code&gt; method, you can just press &lt;code&gt;Alt&lt;/code&gt;+&lt;code&gt;Enter&lt;/code&gt; and select that intention to convert everything to the new syntax. So you have no more excuses to not switch over.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Pinboard - social bookmarking for introverts</title>
      <link>https://cito.github.io/blog/pinboard-review/</link>
      <pubDate>Fri, 23 Dec 2016 19:00:00 +0100</pubDate>
      
      <guid>https://cito.github.io/blog/pinboard-review/</guid>
      <description>&lt;img class=&#34;center half&#34; src=&#34;https://cito.github.io/img/pinboard-review.jpg&#34; alt=&#34;Pinboard&#34;&gt;

&lt;p&gt;Here is a short review of the &lt;a href=&#34;https://pinboard.in/&#34;&gt;Pinboard&lt;/a&gt; bookmarking service that I&amp;rsquo;m using for several years now.&lt;/p&gt;

&lt;p&gt;Every web browser has a built-in bookmark manager, usually opened with the keyboard shortcut &lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;B&lt;/code&gt;. Modern browsers also allow syncing your bookmarks to the could, so that you can share your bookmarks for instance between your home desktop and your tablet or office computer. So why are online bookmark managers like Pinboard still interesting? Why would you even want to pay for them?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;One reason might be to share links and lists of links with others. Many bookmark managers focus on this aspect of &amp;ldquo;social bookmarking&amp;rdquo;. However, this is not the most important aspect of Pinboard. Actually Pinboard even advertises itself as an an &amp;ldquo;antisocial site&amp;rdquo; or &amp;ldquo;social bookmarking for introverts&amp;rdquo; - over half our users don&amp;rsquo;t share any public content at all, and you can make private bookmarks the default setting. In any case you have full control over which links you want to make public and which should stay private. Pinboard is not mainly for discovering links, but for archiving them, kind of your personal treasure trove of links - or as the patron saint of introverts Gollum would call it, &amp;ldquo;my precious!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Another feature is the &amp;ldquo;read later&amp;rdquo; flag that you can add to any bookmark. But this aspect is also not the most important one, and there are dedicated services such as &lt;a href=&#34;https://getpocket.com/&#34;&gt;Pocket&lt;/a&gt; or &lt;a href=&#34;https://www.instapaper.com/&#34;&gt;Instapaper&lt;/a&gt; which offer better solutions for not only keeping track of articles you want to read but also displaying them in a nice readable layout. The Safari web browser even comes with a &amp;ldquo;reading list&amp;rdquo; feature built-in. So I&amp;rsquo;m actually using Pocket as my &amp;ldquo;first line of defense&amp;rdquo; against the information flood from the Internet, and Pinboard only as my archive to store everything that I found useful and want to keep as a reference or read in more depth later.&lt;/p&gt;

&lt;p&gt;One peculiar feature of Pinboard is that you can sync tweets from up to three Twitter accounts and save them to Pinboard. You can then search in your personal twitter archive on Pinboard. You can also choose to add links from these tweets as Pinboard bookmarks. This is definitely a useful feature, but not the reason why I&amp;rsquo;m using Pinboard.&lt;/p&gt;

&lt;p&gt;What makes Pinboard particularly useful are the tags that can be added to the bookmarks, and the possibility to review your bookmarks by tag or combination of tags. For instance, if I want to see all links about 3D programming in Python, I can first click on the &amp;ldquo;3d&amp;rdquo; tag in my tag cloud on the right side of my Pinboard page. Now I see all bookmarks tagged with &amp;ldquo;3d&amp;rdquo;, along with a smaller tag cloud of tags like &amp;ldquo;python&amp;rdquo; with a plus sign that can be clicked to narrow down the list of bookmarks even further. There is another feature that allows combining several tags into a &amp;ldquo;bundle&amp;rdquo;. By clicking onto such a tag bundle, you will see all bookmarks with tags in that bundle (i.e. having at least one tag from that bundle). This allows grouping the tags into several larger areas of interest, like &amp;ldquo;science&amp;rdquo; or &amp;ldquo;politics&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;An interesting feature is the possibility to save arbitrary plain text or markdown formatted notes. Each such note will be an ad hoc web page with its own unique URL. You can tag notes with the same tags that are used for your bookmarks, and they will appear along with your bookmarks for these tags. Like normal bookmarks, notes can also be flagged as private or public.&lt;/p&gt;

&lt;p&gt;Personally, I find Pinboard as a bookmark archive/manager service very useful. It does more or less one thing, but it does it pretty well. The web interface is not very nice and modern, but clean and functional, with bulk editing and a quick editing feature showing a preview of the bookmarked site. There is also a &lt;a href=&#34;http://m.pinboard.in/&#34;&gt;mobile website&lt;/a&gt;, a web &lt;a href=&#34;https://pinboard.in/api/&#34;&gt;API&lt;/a&gt; and there are several official and third-party browser add-ons and native apps supporting Pinboard. The browser add-ons also allow saving and restoring whole &amp;ldquo;tab sets&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;In 2015 the site moved to an annual subscription system, but the annual fee of $11 is still fair and helps the creator of this useful service make a living and pay for the servers. For an annual fee of $25 You can also choose to have all of your bookmarked pages archived and searchable within Pinboard.&lt;/p&gt;

&lt;p&gt;My only complaint is that the website and some of the browser add-ons are getting a bit long in the tooth. Firefox has switched to a new add-on system, and the official add-on based on the old system feels very slow and will probably stop working end of next year when Firefox will move to the new system exclusively. So some overhaul of Pinboard seems overdue.&lt;/p&gt;

&lt;p&gt;Meanwhile, I have created my own Firefox add-on for Pinboard that is snappier than the original one and uses the new add-on system - but I&amp;rsquo;ll write about that in another blog post.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Welcome to my blog</title>
      <link>https://cito.github.io/blog/welcome/</link>
      <pubDate>Thu, 22 Dec 2016 22:00:00 +0100</pubDate>
      
      <guid>https://cito.github.io/blog/welcome/</guid>
      <description>&lt;img class=&#34;center half&#34; src=&#34;https://cito.github.io/img/welcome.jpg&#34; alt=&#34;Heidelberg&#34;&gt;

&lt;p&gt;It&amp;rsquo;s this time of the year again, and I decided to use some of the cold and long winter evenings to finally start blogging.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;It is a crazy time in which we are living. So many exciting developments, opportunities and scientific discoveries, so much technological progress. But on the other hand, so many negative developments in politics and society, so many horrible news. The last years already had been scary, and this year was even scarier. So much hatred and terror and war. And while technology could help solve many problems of mankind, it starts becoming scary in its own way, particularly the recent progress in &lt;a href=&#34;https://www.ted.com/talks/sam_harris_can_we_build_ai_without_losing_control_over_it&#34;&gt;AI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We are facing difficult new ethical questions and disruptive developments and divisions like never before. I believe education, communication and reflection are crucial in making the world sane again. Blogging can be a part of this. So my new year&amp;rsquo;s resolution is to start sharing my 2 cents with you on this blog.&lt;/p&gt;

&lt;p&gt;For now there will be no comment section on my blog since I fear it might become another distraction and waste of time fighting spam. However, I greatly appreciate any personal feedback. Please use the buttons on the top to get in touch with me or learn more &lt;a href=&#34;about&#34;&gt;about me&lt;/a&gt; and my areas of interest.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>